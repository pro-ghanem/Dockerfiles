node {
    try {
        notifyBuild('STARTED')
withEnv(['BRANCH_NAME=staging']) {
    
stage('Check Out')

checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'chadminfrontend', url: 'https://gitlab.com/example/frontend.git']]])


// stage('compile')

// { sh label: '', script: '''npm install && npm install react-scripts@3.4.1 -g --silent '''}

stage ('BUild  docker Image')

{ sh label: '', script: '''docker build -t chadminfrontend:staging_${BUILD_NUMBER} . '''}

 stage('Push Docker image to ECR')
 
    docker.withRegistry('https://686777881901.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:ecr-credentials') {
    docker.image("chadminfrontend:staging_${BUILD_NUMBER}").push("staging_${BUILD_NUMBER}")
 }
 
  stage('Deploy to EKS')

   sh ("kubectl -n=stag set image deployment/chadminfrontend chadminfrontend=686777881901.dkr.ecr.ap-southeast-1.amazonaws.com/chadminfrontend:staging_${BUILD_NUMBER}")

}
}
catch (e) {
// If there was an exception thrown, the build failed
currentBuild.result = "FAILED"
throw e
} finally {
// Success or failure, always send notifications
notifyBuild(currentBuild.result)
}
}
def notifyBuild(String buildStatus = 'STARTED') {
// build status of null means successful
buildStatus =  buildStatus ?: 'SUCCESSFUL'
// Default values
def colorName = 'RED'
def colorCode = '#FF0000'
def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
def summary = "${subject} (${env.BUILD_URL})"
// Override default values based on build status
if (buildStatus == 'STARTED') {
color = 'YELLOW'
colorCode = '#FFFF00'
} else if (buildStatus == 'SUCCESSFUL') {
color = 'GREEN'
colorCode = '#00FF00'
} else {
color = 'RED'
colorCode = '#FF0000'
}
// Send notifications
// slackSend (color: colorCode, message: summary)
}
